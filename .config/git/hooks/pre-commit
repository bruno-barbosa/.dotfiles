#!/usr/bin/env bash

###########################################
# Git Pre-Commit Hook Template
###########################################
#
# To install this hook in a repository:
#   cp ~/.dotfiles/.config/git/hooks/pre-commit .git/hooks/pre-commit
#   chmod +x .git/hooks/pre-commit
#
# Or configure globally:
#   git config --global core.hooksPath ~/.dotfiles/.config/git/hooks
#
###########################################

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Flag to track if any checks fail
CHECKS_FAILED=0

echo "Running pre-commit checks..."
echo ""

###########################################
# 1. Check for files with merge conflicts
###########################################
echo "Checking for merge conflict markers..."
# Exclude hook files from merge conflict check to avoid false positives
if git diff --cached --name-only | grep -v '.config/git/hooks/' | xargs grep -l -E '<<<<<<< |=======$|>>>>>>> ' 2>/dev/null; then
  echo -e "${RED}✗ Found merge conflict markers in staged files${NC}"
  echo "  Please resolve conflicts before committing"
  CHECKS_FAILED=1
else
  echo -e "${GREEN}✓ No merge conflict markers found${NC}"
fi
echo ""

###########################################
# 2. Check for debugging statements
###########################################
echo "Checking for debugging statements..."
DEBUG_PATTERNS=(
  "console\.log"
  "debugger"
  "binding\.pry"
  "byebug"
  "import pdb"
  "pdb\.set_trace"
  "var_dump"
  "print_r"
  "dd\("
)

for pattern in "${DEBUG_PATTERNS[@]}"; do
  # Exclude documentation and hook files from debug checks to avoid false positives
  if git diff --cached --name-only | grep -v -E '\.(md|txt)$|\.config/git/hooks/' | xargs grep -l -E "$pattern" 2>/dev/null; then
    echo -e "${YELLOW}⚠  Warning: Found '$pattern' in staged files${NC}"
    # Uncomment to make this a hard fail:
    # CHECKS_FAILED=1
  fi
done
echo -e "${GREEN}✓ Debug statement check complete${NC}"
echo ""

###########################################
# 3. Check for large files
###########################################
echo "Checking for large files (>5MB)..."
MAX_FILE_SIZE=5242880  # 5MB in bytes

while IFS= read -r file; do
  if [ -f "$file" ]; then
    size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
    if [ "$size" -gt "$MAX_FILE_SIZE" ]; then
      echo -e "${RED}✗ Large file detected: $file ($(numfmt --to=iec-i --suffix=B $size))${NC}"
      echo "  Consider using Git LFS for large files"
      CHECKS_FAILED=1
    fi
  fi
done < <(git diff --cached --name-only)
echo -e "${GREEN}✓ No large files detected${NC}"
echo ""

###########################################
# 4. Check for trailing whitespace
###########################################
echo "Checking for trailing whitespace..."
if git diff --cached --check 2>/dev/null; then
  echo -e "${GREEN}✓ No trailing whitespace found${NC}"
else
  echo -e "${YELLOW}⚠  Warning: Trailing whitespace detected${NC}"
  # Uncomment to make this a hard fail:
  # CHECKS_FAILED=1
fi
echo ""

###########################################
# 5. Run linters (if available)
###########################################

# ESLint for JavaScript/TypeScript
if command -v eslint >/dev/null 2>&1; then
  echo "Running ESLint..."
  JS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|jsx|ts|tsx)$')
  if [ -n "$JS_FILES" ]; then
    if ! eslint $JS_FILES; then
      echo -e "${RED}✗ ESLint failed${NC}"
      CHECKS_FAILED=1
    else
      echo -e "${GREEN}✓ ESLint passed${NC}"
    fi
  fi
  echo ""
fi

# Rubocop for Ruby
if command -v rubocop >/dev/null 2>&1; then
  echo "Running Rubocop..."
  RUBY_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.rb$')
  if [ -n "$RUBY_FILES" ]; then
    if ! rubocop $RUBY_FILES; then
      echo -e "${RED}✗ Rubocop failed${NC}"
      CHECKS_FAILED=1
    else
      echo -e "${GREEN}✓ Rubocop passed${NC}"
    fi
  fi
  echo ""
fi

# Black for Python
if command -v black >/dev/null 2>&1; then
  echo "Running Black (Python formatter check)..."
  PYTHON_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.py$')
  if [ -n "$PYTHON_FILES" ]; then
    if ! black --check $PYTHON_FILES 2>/dev/null; then
      echo -e "${YELLOW}⚠  Warning: Python files not formatted with Black${NC}"
      echo "  Run: black <filename> to format"
      # Uncomment to make this a hard fail:
      # CHECKS_FAILED=1
    else
      echo -e "${GREEN}✓ Black check passed${NC}"
    fi
  fi
  echo ""
fi

# Shellcheck for shell scripts
if command -v shellcheck >/dev/null 2>&1; then
  echo "Running Shellcheck..."
  SHELL_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(sh|bash|zsh)$')
  if [ -n "$SHELL_FILES" ]; then
    if ! shellcheck $SHELL_FILES; then
      echo -e "${YELLOW}⚠  Warning: Shellcheck found issues${NC}"
      # Uncomment to make this a hard fail:
      # CHECKS_FAILED=1
    else
      echo -e "${GREEN}✓ Shellcheck passed${NC}"
    fi
  fi
  echo ""
fi

###########################################
# 6. Check commit message format (if using conventional commits)
###########################################
# Note: This is better done in commit-msg hook, but included here as reference
# Uncomment if you want to enforce conventional commit format

# COMMIT_MSG_FILE="$1"
# if [ -f "$COMMIT_MSG_FILE" ]; then
#   COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")
#   if ! echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+"; then
#     echo -e "${RED}✗ Commit message doesn't follow conventional commit format${NC}"
#     echo "  Format: <type>(<scope>): <description>"
#     echo "  Types: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert"
#     CHECKS_FAILED=1
#   fi
# fi

###########################################
# Final Result
###########################################
echo ""
echo "========================================="
if [ $CHECKS_FAILED -ne 0 ]; then
  echo -e "${RED}✗ Pre-commit checks failed${NC}"
  echo "Fix the issues above and try again"
  echo "To skip these checks, use: git commit --no-verify"
  exit 1
else
  echo -e "${GREEN}✓ All pre-commit checks passed${NC}"
  exit 0
fi
